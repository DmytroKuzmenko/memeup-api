name: memeup-api-prod

services:
  db:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - internal

  api:
    build:
      context: ..
      dockerfile: Dockerfile
      target: final
    image: memeup-api:prod
    restart: unless-stopped
    depends_on:
      - db
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      ASPNETCORE_URLS: http://0.0.0.0:8080

      ConnectionStrings__DefaultConnection: Host=db;Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      Cors__AllowedOrigins: ${CORS_ALLOWED_ORIGINS}

      JWT__Issuer: ${JWT__Issuer}
      JWT__Audience: ${JWT__Audience}
      JWT__Key: ${JWT__Key}
      JWT__LifetimeMinutes: ${JWT__LifetimeMinutes:-60}

      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}

    volumes:
      - uploads_data:/app/uploads
    networks:
      - internal
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"                    
      - "traefik.http.routers.memeup-api.rule=Host(`${API_HOST}`)"
      - "traefik.http.routers.memeup-api.entrypoints=websecure"
      - "traefik.http.routers.memeup-api.tls.certresolver=myresolver"
      - "traefik.http.services.memeup-api.loadbalancer.server.port=8080"
      # ВРЕМЕННО: HTTP-роутер для диагностики (уберёшь потом)
      - "traefik.http.routers.memeup-api-http.rule=Host(`${API_HOST}`)"
      - "traefik.http.routers.memeup-api-http.entrypoints=web"

networks:
  internal:
    driver: bridge
  web:
    external: true

volumes:
  db_data:
  uploads_data:
