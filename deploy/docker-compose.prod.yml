name: memeup-api-prod

services:
  db:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - internal

  api:
    image: ghcr.io/${GHCR_OWNER:-your-gh-username}/memeup.api:latest
    # или, если деплоишь архивом и билдом на сервере — замени на:
    # build:
    #   context: ..
    #   dockerfile: Dockerfile
    #   target: final
    restart: unless-stopped
    depends_on:
      - db
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      ASPNETCORE_URLS: http://0.0.0.0:8080

      ConnectionStrings__DefaultConnection: Host=db;Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      Cors__AllowedOrigins: ${CORS_ALLOWED_ORIGINS}

      JWT__Issuer: ${JWT__Issuer}
      JWT__Audience: ${JWT__Audience}
      JWT__Key: ${JWT__Key}
      JWT__LifetimeMinutes: ${JWT__LifetimeMinutes:-60}

      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}

    volumes:
      - uploads_data:/app/uploads

    networks:
      - internal
      - web                # <-- ВАЖНО: та же сеть, где Traefik

    labels:
      - "traefik.enable=true"
      # API_HOST должен быть задан в .env (см. ниже)
      - "traefik.http.routers.memeup-api.rule=Host(`${API_HOST}`)"
      - "traefik.http.routers.memeup-api.entrypoints=websecure"
      - "traefik.http.routers.memeup-api.tls.certresolver=myresolver"   
      - "traefik.http.services.memeup-api.loadbalancer.server.port=8080"

networks:
  internal:
    driver: bridge
  web:
    external: true          # <-- должна существовать и у Traefik

volumes:
  db_data:
  uploads_data:
