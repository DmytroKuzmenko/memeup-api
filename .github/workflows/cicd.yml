name: Build and Deploy memeup-api

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # (опц.) Быстрая проверка, что есть нужные файлы
      - name: Preflight list files
        run: |
          ls -la
          ls -la deploy || true
          test -f Dockerfile || (echo "Dockerfile missing"; exit 1)
          test -f deploy/docker-compose.prod.yml || (echo "deploy/docker-compose.prod.yml missing"; exit 1)

      # Архивируем весь проект (исключаем .git)
      - name: Archive project files
        run: |
          tar --exclude='.git' -czf memeup-api.tar.gz .

      # Копируем архив на сервер
      - name: Copy archive to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          source: "memeup-api.tar.gz"
          target: "/opt"

      # Деплой на сервере
      - name: SSH and deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            set -e
            cd /opt
            # Обновляем каталог с приложением
            rm -rf memeup-api
            mkdir memeup-api
            tar -xzf memeup-api.tar.gz -C memeup-api
            rm memeup-api.tar.gz

            # .env пишем из секрета (раз хранить файл на GitHub не хотим)
            cat > memeup-api/deploy/.env << 'EOF'
            ${{ secrets.ENV_PROD }}
            EOF

            cd memeup-api/deploy

            # (если Traefik есть) docker network create traefik_proxy || true

            # Собираем и поднимаем
            docker compose -f docker-compose.prod.yml down || true
            docker compose -f docker-compose.prod.yml build --no-cache
            docker compose -f docker-compose.prod.yml up -d

            # Миграции: запускаем API в режиме "только миграции" и выходим
            # 1) Если в Program.cs включена автоприменение миграций и флаг RUN_MIGRATIONS → используем его:
            docker compose -f docker-compose.prod.yml run --rm -e RUN_MIGRATIONS=1 api || true

            # Перезапускаем API после миграций (на всякий)
            docker compose -f docker-compose.prod.yml up -d

            # Быстрый smoke-чек
            # Если есть Traefik и домен:
            # curl -sS -f https://${{ secrets.API_HOST }}/health || curl -sS -f http://${{ secrets.API_HOST }}/health || true
